#include <ros/ros.h>
#include <MD03ARIA/Reg.h>
#include <sensor_msgs/Joy.h>


class Teleop
{
public:
  Teleop();

private:
  void joyCallback(const sensor_msgs::Joy::ConstPtr& joy);
  
  ros::NodeHandle nh_;

  int linear_, angular_, Y, A, B, X;
  double l_scale_, a_scale_;
  float trigg, speed;
  ros::Publisher vel_pub_;
  ros::Subscriber joy_sub_;
  
};


Teleop::Teleop():
  linear_(1),
  angular_(2)
{


  vel_pub_ = nh_.advertise<MD03ARIA::Reg>("MD03_teleop", 1);


  joy_sub_ = nh_.subscribe<sensor_msgs::Joy>("joy", 10, &Teleop::joyCallback, this);

}

void Teleop::joyCallback(const sensor_msgs::Joy::ConstPtr& joy)
{
  MD03ARIA::Reg command;

  Y=joy->buttons[3];
  A=joy->buttons[0];
  B=joy->buttons[1];
  X=joy->buttons[2]; 
  trigg=joy->axes[5];
  
  speed=(((127.5*(trigg))-127.5)*-1);
  
  printf("\nY=%i, A=%i, B=%i,X=%i\n",Y,A,B,X);
 
   if(Y==1&&A==0&&B==0&&X==0)
   {
   command.B0_direction=1;
   command.B2_direction=1;
   }
   if(Y==0&&A==1&&B==0&&X==0)
   {
   command.B0_direction=2;
   command.B2_direction=2;
   }
   if(Y==0&&A==0&&B==1&&X==0)
   {
   command.B0_direction=2;
   command.B2_direction=1;
   }
   if(Y==0&&A==0&&B==0&&X==1)
   {
   command.B0_direction=1;
   command.B2_direction=2;
   }
 
  
  command.B0_speed=speed;
  command.B2_speed=speed;
  vel_pub_.publish(command);
  
  
}


int main(int argc, char** argv)
{
  ros::init(argc, argv, "teleop_turtle");
  Teleop teleop_turtle;

  ros::spin();
}
