//odometry code

#include <ros/ros.h>
#include <tf/transform_broadcaster.h>
#include <tf/transform_listener.h>
#include <nav_msgs/Odometry.h>
#include <std_msgs/ColorRGBA.h>

#include "math.h"
#include <odometry/encoder.h>
#include <std_msgs/Int16.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Point.h>

#define PI 3.14159265

  double x = 0.0; 	//displacement < m >
  double y = 0.0; 	//displacement < m >
  double th_t = 0.0;	//global th < rad >
  float global_x = 0.0;
  float global_y = 0.0;

void encoderCallback(const std_msgs::ColorRGBA::ConstPtr&);


int main(int argc, char** argv)
{
  ros::init(argc, argv, "odometry_publisher");

  ros::NodeHandle n;

  ros::Subscriber sub = n.subscribe("/encoder", 1, encoderCallback);
  
  ros::spin();
  

  return 0;

}



void encoderCallback(const  std_msgs::ColorRGBA::ConstPtr& encoder)
{ 
 ros::NodeHandle n; 
 ros::Publisher odom_pub = n.advertise<nav_msgs::Odometry>("odom", 50);
 tf::TransformBroadcaster odom_broadcaster;

 float pulse_r = encoder->r;
 
 float pulse_l = encoder->g;

  ROS_INFO("\n The data of r is: [%f]\n", pulse_r); 
  ROS_INFO("\n The data of g is: [%f]\n", pulse_l); 
 


  float th = 0.0; 	//angulo de todo el movil < rad >
  float vk = 0.0; 	//velocidad del movil en el centro < m/s >
  /*double dt = 1; //delta t (determined @ micro)*/  //not necessary dt defined ahead with differential of ros::Time
  
  float Ce = 32; //pusos x revolucion
  float nu = 48.75;   //relacion de transmision
  float L = 0.3;  //Distace between motors < m >
  float d = 0.1;  //pulley diameter < m >
  float sl = 0;
  float sr = 0;    //arc length < m >
  float vx = 0;   //initial x velocity < m/s >
  float vy = 0;   //initial y velocity < m/s >
  float vth = 0;  //initial th velocity < m/s >
  float delta_x = 0;
  float delta_y = 0;


  ros::Time current_time, last_time;
  current_time = ros::Time::now();
  last_time = ros::Time::now();

  ros::Rate r(1);  //must be modified ---> now: 10 Hz
  while(n.ok()){

    ros::spinOnce();        // check for incoming messages
    current_time = ros::Time::now();
    
    float dt = (current_time - last_time).toSec(); // time differential
    ROS_INFO("\n The time delta is: [%f]\n", dt); 
    

    float izq = pulse_l;   	//pulse_data section at end
    float der = pulse_r;

  sl=(izq*2*PI/Ce*nu)*(PI*d);//left displacement
  sr=(der*2*PI/Ce*nu)*(PI*d);//right displacement
  
  ROS_INFO("sl : [%f]\n",sl);
  ROS_INFO("sr : [%f]\n",sr);
  
  if (izq!=0 && der!=0) //both motors spinning (rotation center is center of robot)
  {
  	if (izq == der) {
  		vk = (sl+sr)/(2*dt);
  	} else {
  	  if (izq == -der) {
  	  	th = ((sr-sl)/L); 	//angle of the base
       	th_t += th;		//increment in global th
       	vth = th/dt;		//angular velocity of robot
  	  } else {
  		unsigned int uizq = izq;
  		unsigned int uder = der;
  	
  		ROS_INFO("uizq : [%d]\n",uizq);
  		ROS_INFO("uder : [%d]\n",uder);
  		http://mail.google.com/mail/
  	
  		if (uder > uizq) {
  			th = ((sr-sl)/L); 	//angle of the base
       		th_t += th;		//increment in global th
       		vth = th/dt;		//angular velocity of robot
       		vk = vth*(L/2);		//linear velocity of kauil
  		}
  		if (uder < uizq) {
  			th = ((sr-sl)/L); 	//angle of the base
       		th_t += th;		//increment in global th
       		vth = th/dt;		//angular velocity of robot
       		vk = vth*(L/2)*-1;	//linear velocity of kauil
  		}
  	  }
  	}
  } else {
       th = ((sr-sl)/L); 	//angle of the base
       th_t += th;			//increment in global th
       vth = th/dt;			//angular velocity of robot
       vk = vth*(L/2);		//linear velocity of kauil
         
       if (izq < 0 || der < 0) {	//conditionals to ensure vk sign
       	if (vk > 0) {
       		vk *= -1;
       	}
       }
       if (izq > 0 || der > 0) {
       	if (vk < 0) {
       		vk *= -1;
       	}
       }
   }

       if (th > 0 && th_t >= PI) {
         th_t -= 2*PI;
	
       } else {
	if (th != 0 && th_t <= -PI) {
         th_t += 2*PI;
        }
       }
       

       vx = vk*cos(th_t);
       vy = vk*sin(th_t);
       delta_x = vx*dt;
       delta_y = vy*dt;
       x += delta_x;
       y += delta_y;
       
        global_x=x;
        global_y=y;
       

ROS_INFO("X is equal to: %f \n", x);
ROS_INFO("Y is equal to: %f \n", y);
ROS_INFO("Theta is equal to: %f \n", th);
ROS_INFO("Speeds: vk[%f] vth[%f] \n", vk, vth);
ROS_INFO("Speeds: vx[%f] vy[%f] \n", vx, vy);
ROS_INFO("Theta_global: %f \n", th_t);




    //since all odometry is 6DOF we'll need a quaternion created from yaw
    geometry_msgs::Quaternion odom_quat = tf::createQuaternionMsgFromYaw(th);//instead of th_t
    
    if (izq == der) {
    	odom_quat.x = 0;
    	odom_quat.y = 0;
    	odom_quat.z = 0;
    	odom_quat.w = 1;
    }


   ROS_INFO("\nodom_quat is: x:%f y:%f z:%f w:%f \n",odom_quat.x, odom_quat.y, odom_quat.z, odom_quat.w);

    //first, we'll publish the transform over tf
   /* geometry_msgs::TransformStamped odom_trans;
    odom_trans.header.stamp = ros::Time::now();//current_time;
    odom_trans.header.frame_id = "odom";
    odom_trans.child_frame_id = "base_link";

    odom_trans.transform.translation.x = x;
    odom_trans.transform.translation.y = y;
    odom_trans.transform.translation.z = 0.0;
    odom_trans.transform.rotation = tf::createQuaternionMsgFromYaw(th_t);
    //send the transform
    odom_broadcaster.sendTransform(odom_trans);*/

    //next, we'll publish the odometry message over ROS //roscore mark an error hier, despite it works
    nav_msgs::Odometry odom;
    odom.header.stamp = ros::Time::now();//current_time;
    odom.header.frame_id = "odom";

   // geometry_msgs::Quaternion odom_quat = tf::createQuaternionMsgFromRPY(0,0,th_t);//instead of th_t


    //set the position
    odom.pose.pose.position.x = x;
    odom.pose.pose.position.y = y;
    odom.pose.pose.position.z = 0.0;
    odom.pose.pose.orientation = odom_quat;
      
     static tf::TransformBroadcaster odom_broadcaster;
 
     tf::Transform trans;
   
     trans.setOrigin(tf::Vector3(x,y,0));
     trans.setRotation(tf::Quaternion(th_t, 0, 0));

     
     odom_broadcaster.sendTransform(tf::StampedTransform(trans, ros::Time::now(), "/odom", "/base_link"));  


     tf::poseTFToMsg(tf::Pose(tf::Quaternion(th_t, 0, 0), tf::Vector3(x, y, 0)), odom.pose.pose); //create odom.pose.pose message

    //set the velocity
    odom.child_frame_id = "base_link";
    odom.twist.twist.linear.x = vx;
    odom.twist.twist.linear.y = vy;
    odom.twist.twist.linear.z = 0.0;		//added to complete de odom msg
    odom.twist.twist.angular.x = 0.0;		//added to complete de odom msg
    odom.twist.twist.angular.y = 0.0;		//added to complete de odom msg
    odom.twist.twist.angular.z = vth;

    //publish the message
    odom_pub.publish(odom);

    last_time = current_time;

    tf::TransformBroadcaster broadcaster;

broadcaster.sendTransform(
			tf::StampedTransform(
				tf::Transform(tf::Quaternion(0, 0, 0, 1), tf::Vector3(0.08, 0.0, 0.1)),
				ros::Time::now(), "/base_link", "/base_laser"));
    

    r.sleep();
}


}






/*void victimCallback(const std_msgs::Int16::ConstPtr& bleh)
{
 ros::NodeHandle n; 
 ros::Publisher victim_pub = n.advertise<geometry_msgs::Point>("/victim_position", 50);
 geometry_msgs::Point odom_vic_pose;
 
 int condition = bleh->data;
 
 ROS_INFO("The condition I am receiving ist: %i\n", condition);
 
 ros::Rate r(1.0);
  while(n.ok()){

    ros::spinOnce(); 
 
 if(condition==1)
 {
 
 odom_vic_pose.x=global_x;
 odom_vic_pose.y=global_y;
 
 victim_pub.publish(odom_vic_pose);
 
 }
r.sleep();

}}
*/

